#!/usr/bin/env python
import os
import sys
import argparse
import tornado.escape


PROJECT_APP_PY = """#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os.path
ROOT = os.path.abspath(os.path.dirname(__file__))
from july import JulyApplication, run_server

#: define a demo handler for you
#: delete it as your wish
from tornado.web import RequestHandler


class HomeHandler(RequestHandler):
    def get(self):
        self.write('hello july project')


handlers = [
    ('/', HomeHandler),
]


settings = dict(
    cookie_secret='secret',
    xsrf_cookies='secret',
    login_url='/account/login',

    template_path=os.path.join(ROOT, 'templates'),
    static_path=os.path.join(ROOT, 'static'),
    static_url_prefix='/static/',
)

application = JulyApplication(handlers=handlers, debug=True, **settings)

#: you can add a handler later
#: application = JulyApplication(debug=True)
#: application.add_handler(('/', HomeHandler))

#: register an app
#: from myapp.handlers import myapp
#: application.register_app(myapp, url_prefix='/app')

if __name__ == '__main__':
    run_server(application)
"""


APP_HANDLERS_PY = """# -*- coding: utf-8 -*-
from july import JulyHandler, JulyApp


class HomeHandler(JulyHandler):
    #: if you don't want to load template from in app
    #: app_template = False

    def get(self):
        self.write('hello july app')

        #: render from in app template
        #: self.render('myapp/home.html')


handlers = [
    ('/', HomeHandler),
]

myapp = JulyApp('myapp', __name__, handlers=handlers,
                template_folder="templates")

#: you can add handler later by
#: myapp.add_handler(('/', HomeHandler))
"""


def startproject(name):
    """Project structure::

        name/
            __init__.py
            app.py
            static/
            templates/
    """
    os.makedirs('%s/static' % name)
    os.makedirs('%s/templates' % name)

    f = open('%s/__init__.py' % name, 'w')
    f.write('')
    f.close()

    f = open('%s/app.py' % name, 'w')
    f.write(PROJECT_APP_PY)
    f.close()


def startapp(name):
    """App structure::

        name/
            __init__.py
            handlers.py
            templates/
    """
    os.makedirs('%s/templates' % name)

    f = open('%s/__init__.py' % name, 'w')
    f.write('')
    f.close()

    f = open('%s/handlers.py' % name, 'w')
    f.write(APP_HANDLERS_PY)
    f.close()


def _slimmer(path):
    import slimmer
    f = open(path)
    code = f.read()
    f.close()
    if path.endswith('.css'):
        slimmed = slimmer.css_slimmer(code)
        pass


def _get_http_static(url, build='build'):
    import hashlib
    key = hashlib.md5(url).hexdigest()
    filename = os.path.join(os.getcwd(), build, key)
    if os.path.exists(filename):
        return filename
    dirs = os.path.split(filename)[0]
    if not os.path.exists(dirs):
        os.makedirs(dirs)

    def report_hook(read, chunk, total):
        downloaded = read * chunk
        percent = round((downloaded / float(total)) * 100, 2)

        bar = int(downloaded * 40 / float(total))
        progress = '#' * bar + ' ' * (40 - bar)
        if downloaded >= total:
            sys.stdout.write('\n')
        else:
            sys.stdout.write('\r%s   %s%%' % (progress, percent))

        sys.stdout.flush()

    import urllib
    print('Downloading: %s' % url)
    urllib.urlretrieve(url, filename, reporthook=report_hook)
    return filename


def static_compile(path='july.json'):
    """july.json
    {
        "source": "path/to/assets",
        "output": "path/to/output",
        "tmpdir": "build/",
        "css-compiler": "slimmer",
        "js-compiler": "uglifyjs",
        "alias": {
            "jquery": "http://code.jquery.com/jquery.js"
        },
        "target": {
            "name": {
                "css/style.css": ["base.css", "form.css", "style.css"],
                "js/app.js": ["jquery", "app.js"]
            }
        }
    }
    """
    f = open(path)
    config = tornado.escape.json_decode(f.read())
    f.close()
    print config


def main():
    parser = argparse.ArgumentParser(
        prog='july',
        description=('July is a better way to organize your tornado project')
    )
    parser.add_argument('command', nargs='*')

    args = parser.parse_args()
    if args.command:
        command = args.command[0]
    else:
        command = None

    if len(args.command) > 1:
        second = args.command[1]
    else:
        second = None

    if command == 'startproject':
        startproject(args.command[1])
    elif command == 'startapp':
        startapp(args.command[1])
    elif command == 'compile':
        if second:
            static_compile(second)
        else:
            static_compile()


if __name__ == '__main__':
    #main()
    _get_http_static('http://code.jquery.com/jquery.js')
